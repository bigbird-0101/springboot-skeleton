server:
  port: 8099

mybatis-plus:
  mapper-locations: classpath*:/mapper/*.xml
  #实体扫描，多个package用逗号或者分号分隔
  typeAliasesPackage: com.nango.skeletonweb.domain.entity
  executorType: reuse
spring:
  application:
    name: skeletonweb
  shardingsphere:
    datasource:
      names: ds0,ds1
      ds0:
        url: jdbc:mysql://localhost:3306/order?useUnicode=true&characterEncoding=utf8&autoReconnect=true&useSSL=false&rewriteBatchedStatements=true
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        username: root
        password: 123456
      ds1:
        url: jdbc:mysql://localhost:3306/old_order?useUnicode=true&characterEncoding=utf8&autoReconnect=true&useSSL=false&rewriteBatchedStatements=true
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        username: root
        password: 123456
    sharding:
      defaultDataSourceName: ds0  #默认数据源，即不需要分库分表的表查询时会默认使用ds0数据库
      default-database-strategy: #默认数据库分片策略，这里使用Hint分片策略
        hint:
          algorithm-class-name: com.nango.skeletonweb.infrastructure.shardingAlgorithm.HintShardingAlgorithm
      tables:
        t_user:  #t_user表
          key-generator-column-name: id  #主键
          actual-data-nodes: ds0.t_user${0..11}    #数据节点,均匀分布
          table-strategy:  #分表策略
            standard:
              sharding-column: id
              precise-algorithm-class-name: com.nango.skeletonweb.infrastructure.shardingAlgorithm.ConsistentShardingAlgorithm
        t_address:  #t_address
          key-generator-column-name: id  #主键 通过雪花算法生成
          actual-data-nodes: ds0.t_address${0..1}
          table-strategy:  #分表策略
            inline:
              sharding-column: id
              algorithm-expression: t_address${id % 2}

        t_user_order:
          key-generator-column-name: id  #主键
          #数据节点,数据库中t_user_order20200，t_user_order20201,t_user_order20202
          # #数据节点,数据库中t_user_order20210，t_user_order20211,t_user_order20212
          actual-data-nodes: ds0.t_user_order${2020..2021}${0..2}    #数据节点,均匀分布
          table-strategy:  #分表策略
            complex: #行表达式
              sharding-columns: user_id,create_time
              algorithm-class-name: com.nango.skeletonweb.infrastructure.shardingAlgorithm.ComplexShardingAlgorithm
#        t_product:
#          actual-data-nodes: ds${0..1}.t_product

    props:
      sql.show: true #显示原sql以及解析生成的实际sql
      allow.range.query.with.inline.sharding: true  #支持范围查询例如大于、小于、between；